pipeline {
    agent any
    
    environment {
        // Salesforce credentials ID from Jenkins
        SF_CREDENTIALS = 'deltaDeployment'
        // Ant installation name from Jenkins Global Tool Configuration
        ANT_HOME = tool 'Ant'
        PATH = "${ANT_HOME}/bin;${env.PATH}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üì• Checking out code from repository...'
                checkout scm
            }
        }
        
        stage('Detect Changes') {
            steps {
                echo 'üîç Detecting changed files...'
                bat 'scripts\\find-changes.bat'
            }
        }
        
        stage('Validate Delta') {
            steps {
                echo '‚úÖ Validating delta deployment...'
                script {
                    // Check if delta folder has any Salesforce files
                    def deltaExists = fileExists('delta\\src')
                    def packageExists = fileExists('delta\\package.xml')
                    
                    if (!deltaExists || !packageExists) {
                        echo '‚ö†Ô∏è No Salesforce metadata changes detected. Skipping deployment.'
                        echo 'Note: Only files in force-app/main/default/ trigger deployments'
                        env.SKIP_DEPLOYMENT = 'true'
                        return
                    }
                    
                    // Check if src folder has any content
                    def srcHasFiles = bat(
                        script: '@dir /b delta\\src 2>nul | findstr ".*"',
                        returnStatus: true
                    ) == 0
                    
                    if (!srcHasFiles) {
                        echo '‚ö†Ô∏è Delta folder exists but contains no metadata. Skipping deployment.'
                        env.SKIP_DEPLOYMENT = 'true'
                        return
                    }
                    
                    echo '‚úÖ Delta folder contains metadata. Proceeding with deployment...'
                    env.SKIP_DEPLOYMENT = 'false'
                    
                    withCredentials([usernamePassword(
                        credentialsId: "${SF_CREDENTIALS}",
                        usernameVariable: 'SF_USERNAME',
                        passwordVariable: 'SF_PASSWORD'
                    )]) {
                        bat '''
                            ant -Dsf.username=%SF_USERNAME% ^
                                -Dsf.password=%SF_PASSWORD% ^
                                -Dsf.serverurl=https://login.salesforce.com ^
                                -buildfile build\\build.xml ^
                                deltaDeploy
                        '''
                    }
                }
            }
        }
        
        stage('Deploy to Salesforce') {
            when {
                    branch 'main'
                // allOf {
                //   // Only deploy from main branch
                //     expression { env.SKIP_DEPLOYMENT != 'true' }
                // }
            }
            steps {
                echo 'üöÄ Deploying to Salesforce...'
                withCredentials([usernamePassword(
                    credentialsId: "${SF_CREDENTIALS}",
                    usernameVariable: 'SF_USERNAME',
                    passwordVariable: 'SF_PASSWORD'
                )]) {
                    bat '''
                        ant -Dsf.username=%SF_USERNAME% ^
                            -Dsf.password=%SF_PASSWORD% ^
                            -Dsf.serverurl=https://login.salesforce.com ^
                            -buildfile build\\build.xml ^
                            validate
                    '''
                }
            }
        }
        
        stage('Run Tests') {
            when {
                 branch 'main'
            }
            steps {
                echo 'üß™ Running Apex Tests...'
                withCredentials([usernamePassword(
                    credentialsId: "${SF_CREDENTIALS}",
                    usernameVariable: 'SF_USERNAME',
                    passwordVariable: 'SF_PASSWORD'
                )]) {
                    bat '''
                        ant -Dsf.username=%SF_USERNAME% ^
                            -Dsf.password=%SF_PASSWORD% ^
                            -Dsf.serverurl=https://login.salesforce.com ^
                            -buildfile build\\build.xml ^
                            runTests
                    '''
                }
            }
        }
    }
    
    post {
        success {
            script {
                if (env.SKIP_DEPLOYMENT == 'true') {
                    echo '‚úÖ Build succeeded - No Salesforce changes to deploy'
                } else {
                    echo '‚úÖ Deployment succeeded!'
                }
            }
            // Optional: Send notification
            // emailext subject: "Deployment Success - ${env.JOB_NAME}",
            //          body: "Build ${env.BUILD_NUMBER} deployed successfully",
            //          to: "team@example.com"
        }
        failure {
            echo '‚ùå Deployment failed!'
            // Optional: Send notification
            // emailext subject: "Deployment Failed - ${env.JOB_NAME}",
            //          body: "Build ${env.BUILD_NUMBER} failed. Check logs.",
            //          to: "team@example.com"
        }
        always {
            echo 'üßπ Cleaning up workspace...'
            cleanWs()
        }
    }
}